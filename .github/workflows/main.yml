name: Job Tracker Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      ECR_IMAGE_TAG: latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Test with pytest
        run: |
          poetry run pytest

      - name: checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: job_tracker
        run: |
          APP_VERSION=$(sed -n '/^\[tool.poetry\]/,/^$/p' pyproject.toml | grep "version" | cut -d '"' -f 2)
          COMMIT_HASH=$(echo ${GITHUB_SHA} | cut -c1-7)
          IMAGE_TAG=${APP_VERSION}-${COMMIT_HASH}
          
          docker build \
            --build-arg API_USER="${{ secrets.API_USER }}" \
            --build-arg API_KEY="${{ secrets.API_KEY }}" \
            --build-arg MONGO_URI="${{ secrets.MONGO_URI }}" \
            --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --build-arg AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
            -t $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG"
          
          docker build \
            --build-arg API_USER="${{ secrets.API_USER }}" \
            --build-arg API_KEY="${{ secrets.API_KEY }}" \
            --build-arg MONGO_URI="${{ secrets.MONGO_URI }}" \
            --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --build-arg AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
            -t $ECR_REGISTRY/$IMAGE_NAME:latest .
          docker push $ECR_REGISTRY/$IMAGE_NAME:latest
          echo "::set-output name=image::$ECR_REGISTRY/$IMAGE_NAME:latest"

      - name: Deploy to AWS Lambda
        run: |
          aws lambda update-function-code \
          --function-name ${{ env.AWS_LAMBDA_FUNC_NAME }} \
          --image-uri "${{ secrets.AWS_ECR_IMAGE_URI }}:latest"
        env:
          AWS_LAMBDA_FUNC_NAME: job_tracker
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: job_tracker
